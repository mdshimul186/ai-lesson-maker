{
  "video_subject": null,
  "video_script": null,
  "video_terms": null,
  "video_aspect": "9:16",
  "video_concat_mode": "random",
  "video_clip_duration": 5,
  "video_count": 1,
  "video_source": "pexels",
  "video_materials": null,
  "video_language": "English",
  "voice_name": "en-AU-NatashaNeural",
  "voice_volume": 1.0,
  "voice_rate": 1.0,
  "bgm_type": "random",
  "bgm_file": "",
  "bgm_volume": 0.2,
  "subtitle_enabled": true,
  "subtitle_position": "bottom",
  "custom_position": 70.0,
  "font_name": "STHeitiMedium.ttc",
  "text_fore_color": "#FFFFFF",
  "text_background_color": true,
  "font_size": 60,
  "stroke_color": "#000000",
  "stroke_width": 1.5,
  "n_threads": 2,
  "paragraph_number": 1,
  "task_id": "cd17c3fa-aeaf-4751-9f40-60f602858eb0",
  "test_mode": false,
  "segments": 1,
  "language": "English",
  "story_prompt": "docker",
  "image_style": "realistic",
  "resolution": "1920*1080",
  "include_subtitles": false,
  "visual_content_in_language": true,
  "logo_url": null,
  "intro_video_url": null,
  "outro_video_url": null,
  "theme": "sunset",
  "custom_colors": null,
  "scenes": [
    {
      "text": "Docker is a platform designed to make it easier for developers to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all parts it needs, such as libraries and other dependencies, and ship it all out as one package. By doing so, the developer can be assured that the application will run on any other Linux machine regardless of any customized settings that machine might have that could differ from the machine used for writing and testing the code. With Docker, engineers can easily manage those tasks with fewer interruptions, ensuring their applications perform consistently.",
      "image_prompt": "# Docker Architecture Overview\n\n```mermaid\ngraph LR\n    Client -->|Docker CLI| Daemon\n    Daemon -->|Manages| Containers\n    Daemon -->|Accesses| Images\n    subgraph Docker Host\n    Containers\n    Images\n    end\n```\n\n### Key Components:\n\n| Component | Role |\n|-----------|------|\n| Client | Interface for users |\n| Daemon | Runs and manages Docker components |\n| Containers | Encapsulated environment for apps |\n| Images | Read-only templates for containers |",
      "url": ""
    }
  ]
}