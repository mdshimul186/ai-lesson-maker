{
  "video_subject": null,
  "video_script": null,
  "video_terms": null,
  "video_aspect": "9:16",
  "video_concat_mode": "random",
  "video_clip_duration": 5,
  "video_count": 1,
  "video_source": "pexels",
  "video_materials": null,
  "video_language": "English",
  "voice_name": "en-AU-NatashaNeural",
  "voice_volume": 1.0,
  "voice_rate": 1.0,
  "bgm_type": "random",
  "bgm_file": "",
  "bgm_volume": 0.2,
  "subtitle_enabled": true,
  "subtitle_position": "bottom",
  "custom_position": 70.0,
  "font_name": "STHeitiMedium.ttc",
  "text_fore_color": "#FFFFFF",
  "text_background_color": true,
  "font_size": 60,
  "stroke_color": "#000000",
  "stroke_width": 1.5,
  "n_threads": 2,
  "paragraph_number": 1,
  "task_id": "ca531e1f-d4f7-41ff-add5-25043725f374",
  "test_mode": false,
  "segments": 1,
  "language": "English",
  "story_prompt": "docker",
  "image_style": "realistic",
  "resolution": "1920*1080",
  "include_subtitles": false,
  "visual_content_in_language": true,
  "logo_url": null,
  "intro_video_url": null,
  "outro_video_url": null,
  "theme": "sunset",
  "custom_colors": null,
  "scenes": [
    {
      "text": "Docker is a platform that uses OS-level virtualization to deliver software in packages called containers. Containers are isolated from one another and come bundled with all their dependencies, allowing them to run on any machine that includes the Docker engine, regardless of the underlying operating environment. This simplifies the deployment of applications across various infrastructures by ensuring that code remains consistent from development through production.",
      "image_prompt": "# Docker Architecture Overview\n\n```mermaid\nflowchart LR\n  A[Docker Client] --> B[Docker Daemon]\n  B --> C[Containerd]\n  C --> D[RunC]\n  D --> E[Containers]\n```\n\n### Key Components:\n\n| Component     | Description                                      |\n|---------------|--------------------------------------------------|\n| Docker Client | Interface used to interact with the Docker Daemon|\n| Docker Daemon | Core service that manages Docker objects         |\n| Containerd    | Interacts with RunC to run containers            |\n| RunC          | Executes containers using Docker images          |\n| Containers    | Executable units of software in Docker           |",
      "url": ""
    },
    {
      "text": "To deploy applications using Docker, one typically writes a Dockerfile which contains a set of instructions on how to build a Docker image. This image encapsulates all necessary components such as libraries, environment variables, and files required to run the application. Once built, the image can be launched as a container using Docker, providing a self-sufficient deployment unit. This simplifies the management of software dependencies and ensures consistency across development and production environments.",
      "image_prompt": "# Example Dockerfile for a Node.js App\n\n```dockerfile\n# Use an official Node runtime as a parent image\nFROM node:14\n\n# Set the working directory\nWORKDIR /usr/src/app\n\n# Copy the current directory contents into the container at /app\nCOPY . .\n\n# Install any needed packages specified in package.json\nRUN npm install\n\n# Make port 8080 available to the world outside this container\nEXPOSE 8080\n\n# Run app.js using Node\nCMD [\"node\", \"app.js\"]\n```\n\n### Key Steps:\n- **FROM**: Specify the base image to build upon\n- **WORKDIR**: Set the working directory in the container\n- **COPY**: Copy files from host to the container\n- **RUN**: Execute commands to install dependencies\n- **EXPOSE**: Specify the port to expose\n- **CMD**: Define the command to run your app",
      "url": ""
    }
  ]
}