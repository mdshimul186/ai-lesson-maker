{
  "video_subject": null,
  "video_script": null,
  "video_terms": null,
  "video_aspect": "9:16",
  "video_concat_mode": "random",
  "video_clip_duration": 5,
  "video_count": 1,
  "video_source": "pexels",
  "video_materials": null,
  "video_language": "English",
  "voice_name": "en-AU-NatashaNeural",
  "voice_volume": 1.0,
  "voice_rate": 1.0,
  "bgm_type": "random",
  "bgm_file": "",
  "bgm_volume": 0.2,
  "subtitle_enabled": true,
  "subtitle_position": "bottom",
  "custom_position": 70.0,
  "font_name": "STHeitiMedium.ttc",
  "text_fore_color": "#FFFFFF",
  "text_background_color": true,
  "font_size": 60,
  "stroke_color": "#000000",
  "stroke_width": 1.5,
  "n_threads": 2,
  "paragraph_number": 1,
  "task_id": "7cac7ec6-0cbe-4adf-b29b-4bb2bbb19946",
  "test_mode": false,
  "segments": 2,
  "language": "English",
  "story_prompt": "docker",
  "image_style": "realistic",
  "resolution": "1920*1080",
  "include_subtitles": false,
  "visual_content_in_language": true,
  "logo_url": null,
  "intro_video_url": null,
  "outro_video_url": null,
  "theme": "warm",
  "custom_colors": null,
  "scenes": [
    {
      "text": "Docker is an open platform that allows developers to automate the deployment of applications inside lightweight, portable containers. These containers can run in any environment, providing a consistent runtime and eliminating compatibility issues. Docker simplifies application deployment by packaging an application and its dependencies into a single container, ensuring uniformity across multiple developmental and production setups.",
      "image_prompt": "# Docker Overview\n\n```mermaid\nflowchart TD\n    A[Developer Environment] --> B(Container Image Build)\n    B --> C{Registry}\n    C --> D[Production Environment]\n    D --> E{Running Container}\n```\n\n### Key Points:\n- **Developer Environment**: Where code is developed.\n- **Container Image Build**: Creating an image with all dependencies.\n- **Registry**: Storing and distributing images.\n- **Production Environment**: Where the application runs in Docker containers.\n- **Running Container**: Execution of an image instance.",
      "url": ""
    },
    {
      "text": "Docker uses a client-server architecture. The Docker client talks to the Docker daemon, which does the heavy lifting of building, running, and managing Docker containers. The Docker daemon runs on a host machine, and you can interact with it using the Docker client through the command line. Communication between clients and daemons can occur locally or remotely, thus enabling flexible deployment and management of containers.",
      "image_prompt": "# Docker Architecture\n\n```mermaid\nflowchart LR\n    A[Docker CLI] --> B(Docker Daemon)\n    B --> C{Container Management}\n    C --> D[Container Instances]\n    B --> E[Image Management]\n    B --> F[Network and Volumes]\n```\n\n### Key Components:\n- **Docker CLI**: Command-line interface for interaction with Docker.\n- **Docker Daemon**: Handles requests from the Docker CLI, builds and runs containers.\n- **Container Instances**: Actual running applications inside containers.\n- **Image Management**: Deals with storing and fetching of container images.\n- **Network and Volumes**: Manages networking and data storage for containers.",
      "url": ""
    }
  ]
}