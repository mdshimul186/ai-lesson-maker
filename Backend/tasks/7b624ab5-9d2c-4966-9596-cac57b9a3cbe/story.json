{
  "video_subject": null,
  "video_script": null,
  "video_terms": null,
  "video_aspect": "9:16",
  "video_concat_mode": "random",
  "video_clip_duration": 5,
  "video_count": 1,
  "video_source": "pexels",
  "video_materials": null,
  "video_language": "English",
  "voice_name": "en-AU-NatashaNeural",
  "voice_volume": 1.0,
  "voice_rate": 1.0,
  "bgm_type": "random",
  "bgm_file": "",
  "bgm_volume": 0.2,
  "subtitle_enabled": true,
  "subtitle_position": "bottom",
  "custom_position": 70.0,
  "font_name": "STHeitiMedium.ttc",
  "text_fore_color": "#FFFFFF",
  "text_background_color": true,
  "font_size": 60,
  "stroke_color": "#000000",
  "stroke_width": 1.5,
  "n_threads": 2,
  "paragraph_number": 1,
  "task_id": "7b624ab5-9d2c-4966-9596-cac57b9a3cbe",
  "test_mode": false,
  "segments": 1,
  "language": "English",
  "story_prompt": "docker",
  "image_style": "realistic",
  "resolution": "1920*1080",
  "include_subtitles": false,
  "visual_content_in_language": true,
  "logo_url": null,
  "intro_video_url": null,
  "outro_video_url": null,
  "theme": "sunset",
  "custom_colors": null,
  "scenes": [
    {
      "text": "Docker is a platform used for developing, shipping, and running applications in containers. Containers allow a developer to package an application with all parts it needs, such as libraries and other dependencies, and ship it all out as one package. Docker ensures that applications can be shipped and executed in any environment consistently. This portability is achieved through containerization technology, which provides a lightweight virtualized environment. Docker also integrates with popular CI/CD tools, allowing seamless and automated deployment processes.",
      "image_prompt": "## Docker Container Lifecycle\n\n```mermaid\nflowchart TD\n    A[Development]\n    B[Build Docker Image]\n    C[Push to Registry]\n    D[Pull Image from Registry]\n    E[Run Docker Container]\n    F[Stop and Remove Container]\n\n    A -->|Code & Dependencies| B\n    B --> C\n    C --> D\n    D --> E\n    E -->|Executing Application| F\n```\n\n### Key Stages in Docker Lifecycle:\n\n- **Development**: Write code and define dependencies.\n- **Build Docker Image**: Package the application into an image.\n- **Push to Registry**: Store the image in a registry for sharing.\n- **Pull from Registry**: Retrieve the image from the registry.\n- **Run Docker Container**: Execute the application in a containerized environment.\n- **Stop and Remove**: Terminate the running container and clean up resources.",
      "url": ""
    }
  ]
}